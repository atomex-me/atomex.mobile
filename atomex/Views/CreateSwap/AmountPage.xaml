<?xml version="1.0" encoding="UTF-8"?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:custom="clr-namespace:atomex.CustomElements"
             xmlns:helpers="clr-namespace:atomex.Helpers"
             xmlns:converters="clr-namespace:atomex.Converters"
             x:Class="atomex.Views.CreateSwap.AmountPage"
             Title="{helpers:Translate CreateSwapPageTitle}"
             Style="{DynamicResource AdditionalBackgroundStyle}">
    <ContentPage.Resources>
        <ResourceDictionary>
            <converters:InverseBoolConverter x:Key="InverseBool"/>
        </ResourceDictionary>
    </ContentPage.Resources>
    <ContentPage.Content>
        <RelativeLayout>
            <ActivityIndicator RelativeLayout.XConstraint= "{ConstraintExpression Type=RelativeToParent, Property=Width, Factor =.5, Constant=-25}"
	             	           RelativeLayout.YConstraint="{ConstraintExpression Type=RelativeToParent, Property=Height, Factor =.5, Constant=-25}"
                               RelativeLayout.WidthConstraint="50"
                               RelativeLayout.HeightConstraint="50"
                               BackgroundColor="Transparent"
                               Color="{AppThemeBinding Dark={StaticResource LoaderColorDark}, Light=Black}"
                               IsRunning="{Binding IsLoading}"
                               IsVisible="{Binding IsLoading}"/>
            <StackLayout Padding="20,0"
                         Spacing="0"
                         Opacity="{Binding Opacity}"
                         RelativeLayout.WidthConstraint= "{ConstraintExpression Type=RelativeToParent, Property=Width, Factor=1}"
                         RelativeLayout.HeightConstraint="{ConstraintExpression Type=RelativeToParent, Property=Height, Factor=1}">
                <Label Text="{helpers:Translate EnterAmountLabel}"
                       Style="{DynamicResource CreateSwapTitleStyle}"/>
                <Grid ColumnSpacing="0">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="60"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="8*"/>
                        <ColumnDefinition Width="2*"/>
                    </Grid.ColumnDefinitions>
                    <Frame Grid.ColumnSpan="2"
                           CornerRadius="10"
                           x:Name="AmountFrame"
                           Style="{DynamicResource EntryFrameStyle}">
                        <StackLayout Orientation="Horizontal">
                            <StackLayout Grid.Column="0"
                                         HorizontalOptions="FillAndExpand">
                                <StackLayout.GestureRecognizers>
                                    <TapGestureRecognizer Tapped="AmountEntryTapped"/>
                                </StackLayout.GestureRecognizers>
                                <RelativeLayout RelativeLayout.WidthConstraint="{ConstraintExpression Type=RelativeToParent,Property=Width,Factor=1}">
                                    <custom:CustomEntry Keyboard="Numeric"
                                                        x:Name="Amount"
                                                        Text="{Binding AmountString, Mode=TwoWay}"
                                                        Placeholder="{Binding AmountEntryPlaceholderString}"
                                                        Style="{DynamicResource CustomEntryStyle}"
                                                        Focused="AmountEntryFocused"
                                                        Unfocused="AmountEntryFocused"
                                                        TextChanged="OnAmountTextChanged"
                                                        RelativeLayout.WidthConstraint="{ConstraintExpression Type=RelativeToParent,Property=Width,Factor=1}"
                                                        RelativeLayout.HeightConstraint="{ConstraintExpression Type=RelativeToParent,Property=Height,Factor=1}"/>
                                    <Label x:Name="AmountHint"
                                           Text="{Binding AmountEntryPlaceholderString}"
                                           Style="{DynamicResource EntryHintStyle}"
                                           RelativeLayout.WidthConstraint="{ConstraintExpression Type=RelativeToParent,Property=Width,Factor=1}"
                                           RelativeLayout.HeightConstraint="{ConstraintExpression Type=RelativeToParent,Property=Height,Factor=1}"
                                           VerticalTextAlignment="Center"/>
                                </RelativeLayout>
                            </StackLayout>
                            <StackLayout Grid.Column="1"
                                         Orientation="Horizontal">
                                <RelativeLayout WidthRequest="80">
                                    <Button Text="{helpers:Translate MaxButton}"
                                            Style="{DynamicResource TransparentButtonStyle}"
                                            IsEnabled="{Binding IsLoading, Converter={StaticResource InverseBool}}"
                                            Command="{Binding MaxAmountCommand}"
                                            RelativeLayout.HeightConstraint="60"/>
                                     <ActivityIndicator RelativeLayout.XConstraint= "{ConstraintExpression Type=RelativeToParent, Property=Width, Factor =.5, Constant=-10}"
	             	                                    RelativeLayout.YConstraint="{ConstraintExpression Type=RelativeToParent, Property=Height, Factor =.5, Constant=-10}"
                                                        RelativeLayout.WidthConstraint="20"
                                                        RelativeLayout.HeightConstraint="20"
                                                        BackgroundColor="Transparent"
                                                        Color="{AppThemeBinding Dark={StaticResource LoaderColorDark}, Light={StaticResource LoaderColor}}"
                                                        IsRunning="{Binding IsLoading}"
                                                        IsVisible="{Binding IsLoading}"/>
                                </RelativeLayout>
                            </StackLayout>
                         </StackLayout>
                    </Frame>
                </Grid>
                <Label Margin="10,0"
                       VerticalTextAlignment="Center"
                       TextColor="{AppThemeBinding Dark={StaticResource MainTextColorDark}, Light={StaticResource MainTextColor}}">
                    <Label.FormattedText>
                        <FormattedString>
                            <Span Text="{helpers:Translate AvailableMarketVolumeLabel}"
                                  Style="{DynamicResource MarketVolumeLabelStyle}"/>
                            <Span Text=": "
                                  Style="{DynamicResource MarketVolumeLabelStyle}"/>
                            <Span Text="{Binding EstimatedMaxAmount, StringFormat='{0:0.####}'}"
                                  Style="{DynamicResource MarketVolumeValueStyle}"/>
                            <Span Text=" "/>
                            <Span Text="{Binding FromCurrencyViewModel.CurrencyCode}"
                                  Style="{DynamicResource CurrencyCodeLabelStyle}"/>
                        </FormattedString>
                    </Label.FormattedText>
                </Label>
                <Grid Margin="0,10"
                      ColumnSpacing="0"
                      RowSpacing="0">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="80" />
                        <RowDefinition Height="20" />
                        <RowDefinition Height="15" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="4*" />
                        <ColumnDefinition Width="2*" />
                        <ColumnDefinition Width="4*" />
                    </Grid.ColumnDefinitions>
                    <Image Source="{Binding FromCurrencyViewModel.CurrencyCode}"
                           Margin="0,10"/>
                    <Image Source="ConvertArrow"
                           Grid.Column="1"
                           WidthRequest="40"
                           VerticalOptions="CenterAndExpand"/>
                    <Image Grid.Column="2"
                           Source="{Binding ToCurrencyViewModel.CurrencyCode}"
                           Margin="0,10"/>
                    <Label Grid.Row="1"
                           HorizontalTextAlignment="Center"
                           VerticalTextAlignment="End"
                           TextColor="{AppThemeBinding Dark={StaticResource MainTextColorDark}, Light={StaticResource MainTextColor}}">
                        <Label.FormattedText>
                            <FormattedString>
                                <Span Text="{Binding Amount, StringFormat='{0:0.########}'}"
                                      FontSize="14"
                                      FontFamily="{DynamicResource BoldFont}"/>
                                <Span Text=" "/>
                                <Span Text="{Binding FromCurrencyViewModel.CurrencyCode}"
                                      FontSize="12"
                                      FontFamily="{DynamicResource BoldFont}"/>
                            </FormattedString>
                        </Label.FormattedText>
                    </Label>
                    <Label Text="{helpers:Translate NoLiquidityLabel}"
                           Grid.Row="1"
                           Grid.Column="2"
                           FontFamily="{DynamicResource RegularFont}"
                           TextColor="{AppThemeBinding Dark={StaticResource ErrorTextColorDark}, Light={StaticResource ErrorTextColor}}"
                           FontSize="14"
                           HorizontalTextAlignment="Center"
                           VerticalTextAlignment="End"
                           IsVisible="{Binding IsNoLiquidity}"/>
                    <Label Grid.Row="1"
                           Grid.Column="2"
                           HorizontalTextAlignment="Center"
                           VerticalTextAlignment="Center"
                           TextColor="{AppThemeBinding Dark={StaticResource MainTextColorDark}, Light={StaticResource MainTextColor}}">
                        <Label.Triggers>
                            <DataTrigger TargetType="Label"
                                         Binding="{Binding IsNoLiquidity}"
                                         Value="True">
                                <Setter Property="IsVisible"
                                        Value="False"/>
                            </DataTrigger>
                        </Label.Triggers>
                        <Label.FormattedText>
                            <FormattedString>
                                <Span Text="{Binding TargetAmount, StringFormat='{0:0.########}'}"
                                      FontSize="14"
                                      FontFamily="{DynamicResource BoldFont}"/>
                                <Span Text=" "/>
                                <Span Text="{Binding ToCurrencyViewModel.CurrencyCode}"
                                      FontSize="12"
                                      FontFamily="{DynamicResource BoldFont}"/>
                            </FormattedString>
                        </Label.FormattedText>
                    </Label>
                    <Label Grid.Row="2"
                           Text="{Binding AmountInBase, StringFormat='{0:f2} $'}"
                           Style="{DynamicResource InBaseLabelStyle}"
                           HorizontalTextAlignment="Center"
                           VerticalTextAlignment="Start"/>
                    <Label Grid.Row="2"
                           Grid.Column="2"
                           Text="{Binding TargetAmountInBase, StringFormat='{0:f2} $'}"
                           Style="{DynamicResource InBaseLabelStyle}"
                           HorizontalTextAlignment="Center"
                           VerticalTextAlignment="Start"/>
                </Grid>
                <Label HorizontalTextAlignment="Center">
                    <Label.GestureRecognizers>
                        <TapGestureRecognizer Command="{Binding TotalFeeCommand}"/>
                    </Label.GestureRecognizers>
                    <Label.FormattedText>
                        <FormattedString>
                            <Span Text="{helpers:Translate EstimatedPriceLabel}"
                                  Style="{DynamicResource EstimatedLabelStyle}"/>
                            <Span Text=": "
                                  Style="{DynamicResource EstimatedLabelStyle}"/>
                            <Span Text="{Binding EstimatedPrice}"
                                  Style="{DynamicResource EstimatedValueStyle}"/>
                        </FormattedString>
                    </Label.FormattedText>
                </Label>
                <StackLayout Orientation="Horizontal"
                             HorizontalOptions="Center"
                             Padding="0,2">
                    <StackLayout.GestureRecognizers>
                        <TapGestureRecognizer Command="{Binding TotalFeeCommand}"/>
                    </StackLayout.GestureRecognizers>
                    <Label HorizontalTextAlignment="Center">
                        <Label.FormattedText>
                            <FormattedString>
                                <Span Text="{helpers:Translate EstimatedNetworkFeeLabel}"
                                      Style="{DynamicResource EstimatedLabelStyle}"/>
                                <Span Text=": "
                                      Style="{DynamicResource EstimatedLabelStyle}"/>
                                <Span Text="{Binding EstimatedTotalNetworkFeeInBase, StringFormat=' {0:0.##} $'}"
                                      Style="{DynamicResource EstimatedValueStyle}"/>
                            </FormattedString>
                        </Label.FormattedText>
                    </Label>
                    <Image Source="ic_question"
                           WidthRequest="16"
                           HeightRequest="16"/>
                </StackLayout>
                <Frame Style="{DynamicResource WarningFrameStyle}">
                    <Frame.Triggers>
                        <DataTrigger TargetType="Frame"
                                     Binding="{Binding Warning}"
                                     Value="">
                            <Setter Property="IsVisible"
                                    Value="False"/>
                        </DataTrigger>
                        <DataTrigger TargetType="Frame"
                                     Binding="{Binding IsCriticalWarning}"
                                     Value="True">
                            <Setter Property="BackgroundColor"
                                    Value="{AppThemeBinding Dark={StaticResource ErrorFrameBackgroundColorDark}, Light={StaticResource ErrorFrameBackgroundColor}}"/>
                        </DataTrigger>
                        <DataTrigger TargetType="Frame"
                                     Binding="{Binding IsCriticalWarning}"
                                     Value="False">
                            <Setter Property="BackgroundColor"
                                    Value="{AppThemeBinding Dark={StaticResource WarningFrameBackgroundColorDark}, Light={StaticResource WarningFrameBackgroundColor}}"/>
                        </DataTrigger>
                    </Frame.Triggers>
                    <StackLayout Orientation="Horizontal"
                                 Spacing="0"
                                 HorizontalOptions="CenterAndExpand">
                        <Image Source="Warning"
                               HeightRequest="24"
                               WidthRequest="24"
                               VerticalOptions="Center"
                               HorizontalOptions="End"/>
                        <Label Text="{Binding Warning}"
                               Style="{DynamicResource ErrorTextStyle}">
                            <Label.Triggers>
                                <DataTrigger TargetType="Label"
                                             Binding="{Binding IsCriticalWarning}"
                                             Value="True">
                                    <Setter Property="TextColor"
                                            Value="{AppThemeBinding Dark={StaticResource ErrorTextColorDark}, Light={StaticResource ErrorTextColor}}"/>
                                </DataTrigger>
                                <DataTrigger TargetType="Label"
                                             Binding="{Binding IsCriticalWarning}"
                                             Value="False">
                                    <Setter Property="TextColor"
                                            Value="{AppThemeBinding Dark={StaticResource WarningTextColorDark}, Light={StaticResource WarningTextColor}}"/>
                                </DataTrigger>
                            </Label.Triggers>
                        </Label>
                    </StackLayout>
                </Frame>
                <Button Text="{helpers:Translate NextButton}"
                        Margin="16"
                        VerticalOptions="EndAndExpand"
                        Style="{DynamicResource MainButtonStyle}"
                        IsEnabled="{Binding CanConvert}"
                        Command="{Binding ConfirmationPageCommand}" >
                    <Button.Triggers>
                        <DataTrigger TargetType="Button"
                                     Binding="{Binding CanConvert}"
                                     Value="True">
                            <Setter Property="BackgroundColor"
                                    Value="{AppThemeBinding Dark={StaticResource MainButtonBackgroundColorDark}, Light={StaticResource MainButtonBackgroundColor}}"/>
                        </DataTrigger>
                        <DataTrigger TargetType="Button"
                                     Binding="{Binding CanConvert}"
                                     Value="False">
                            <Setter Property="BackgroundColor"
                                    Value="LightGray"/>
                            <Setter Property="BorderColor"
                                    Value="LightGray"/>
                        </DataTrigger>
                    </Button.Triggers>
                </Button>
            </StackLayout>
        </RelativeLayout>
    </ContentPage.Content>
</ContentPage>
