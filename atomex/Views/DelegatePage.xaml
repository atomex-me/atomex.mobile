<?xml version="1.0" encoding="UTF-8"?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:controls="clr-namespace:atomex.CustomElements"
             xmlns:resources="clr-namespace:atomex.Resources"
             x:Class="atomex.DelegatePage"
             Title="{x:Static resources:AppResources.DelegatePageTitle}"
             BackgroundColor="{DynamicResource AdditionalBackgroundColor}">
    <ScrollView x:Name="Page">
        <StackLayout x:Name="Content"
                     VerticalOptions="FillAndExpand"
                     Margin="20"
                     Spacing="0">
            <Label Text="{x:Static resources:AppResources.DelegateToBakeryLabel}"
                   FontFamily="{DynamicResource BoldFont}"
                   TextColor="{DynamicResource MainTextColor}"
                   FontSize="18"
                   HorizontalTextAlignment="Center"
                   Padding="20,10"/>
            <Grid VerticalOptions="Fill"
                  HorizontalOptions="Fill"
                  ColumnSpacing="0"
                  RowSpacing="0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="30" />
                    <RowDefinition Height="30" />
                    <RowDefinition Height="0.5" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="2*" />
                    <ColumnDefinition Width="7*" />
                    <ColumnDefinition Width="1*" />
                </Grid.ColumnDefinitions>
                <controls:CustomFrame Grid.ColumnSpan="4"
                                      Grid.RowSpan="3"
                                      x:Name="BakerFrame"
                                      CornerRadius="20,20,0,0"
                                      Style="{DynamicResource EntryFrameStyle}">
                    <!--<controls:CustomPicker x:Name="BakerPicker"
                                           ItemsSource="{Binding FromBakersList}"
                                           ItemDisplayBinding="{Binding Name}"
                                           SelectedItem="{Binding BakerViewModel}"
                                           VerticalOptions="FillAndExpand"
                                           Focused="OnBakerPickerFocused"
                                           Unfocused="OnBakerPickerFocused"
                                           TextColor="Transparent"/>-->
                    <controls:CustomFrame.GestureRecognizers>
                        <TapGestureRecognizer Tapped="OnBakerPickerClicked"/>
                    </controls:CustomFrame.GestureRecognizers>
                </controls:CustomFrame>
                <Image Grid.RowSpan="2"
                       Source="{Binding BakerViewModel.Logo}"
                       Margin="20,10,0,10"
                       HorizontalOptions="Start"
                       VerticalOptions="Center">
                    <Image.GestureRecognizers>
                        <TapGestureRecognizer Tapped="OnBakerPickerClicked"/>
                    </Image.GestureRecognizers>
                </Image>
                <StackLayout Grid.Column="1"
                             Grid.RowSpan="2"
                             VerticalOptions="Center"
                             HorizontalOptions="Start"
                             Padding="10,0"
                             Spacing="0">
                    <StackLayout.GestureRecognizers>
                        <TapGestureRecognizer Tapped="OnBakerPickerClicked"/>
                    </StackLayout.GestureRecognizers>
                    <Label Text="{Binding BakerViewModel.Name}"
                           VerticalTextAlignment="End"
                           FontFamily="{DynamicResource BoldFont}"
                           TextColor="{DynamicResource MainTextColor}"
                           FontSize="14"/>
                    <Label VerticalTextAlignment="Start"
                           FontFamily="{DynamicResource LightFont}"
                           TextColor="{DynamicResource MainTextColor}"
                           FontSize="12">
                        <Label.Triggers>
                            <DataTrigger TargetType="Label"
                                     Binding="{Binding BakerViewModel.Name}"
                                     Value="Custom Baker">
                                <Setter Property="IsVisible"
                                        Value="False"/>
                        </DataTrigger>
                        </Label.Triggers>
                        <Label.FormattedText>
                            <FormattedString>
                                <Span Text="{Binding BakerViewModel.EstimatedRoi, StringFormat='{0:P}'}"
                                      TextColor="Green"/>
                                <Span Text=" (min "/>
                                <Span Text="{Binding BakerViewModel.MinDelegation}"/>
                                <Span Text=" XTZ)"/>
                            </FormattedString>
                        </Label.FormattedText>
                    </Label>
                </StackLayout>
                <Image Grid.Column="3"
                       Grid.RowSpan="2"
                       Source="RightArrow__black"
                       Margin="0,25,15,25">
                    <Image.GestureRecognizers>
                        <TapGestureRecognizer Tapped="OnBakerPickerClicked"/>
                    </Image.GestureRecognizers>
                </Image>
                <StackLayout Style="{DynamicResource SeparatorStyle}"
                             Grid.Row="2"
                             Grid.ColumnSpan="4"
                             Margin="20,0,0,0"/>
            </Grid>       
            <Grid VerticalOptions="Fill"
                  HorizontalOptions="Fill"
                  RowSpacing="0"
                  ColumnSpacing="0"
                  BackgroundColor="{DynamicResource MainBackgroundColor}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="20" />
                    <RowDefinition Height="40" />
                    <RowDefinition Height="0.5" />
                </Grid.RowDefinitions>
                <Label Text="{x:Static resources:AppResources.ToAddressLabel}"
                       Style="{DynamicResource EntryHintStyle}"
                       Padding="20,5,20,0"
                       IsVisible="True"/>
                <Frame Grid.Row="1"
                       Grid.RowSpan="3"
                       Style="{DynamicResource EntryFrameStyle}"
                       x:Name="ToAddressFrame">
                    <controls:CustomEntry x:Name="ToAddressEntry"
                                          Keyboard="Text"
                                          Placeholder="{x:Static resources:AppResources.BakerAddressPlaceholder}"
                                          PlaceholderColor="Gray"
                                          Focused="OnToAddressEntryFocused"
                                          Unfocused="OnToAddressEntryFocused"
                                          Style="{DynamicResource CustomEntryStyle}"
                                          Margin="0,0,15,0"/>
                </Frame>
                <StackLayout Style="{DynamicResource SeparatorStyle}"
                             Grid.Row="2"
                             Margin="20,0,0,0"/>
            </Grid>
            <Grid VerticalOptions="Fill"
                  HorizontalOptions="Fill"
                  RowSpacing="0"
                  ColumnSpacing="0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="20" />
                    <RowDefinition Height="20" />
                    <RowDefinition Height="20" />
                    <RowDefinition Height="0.5" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="9*" />
                    <ColumnDefinition Width="1*" />
                </Grid.ColumnDefinitions>
                <controls:CustomFrame Grid.RowSpan="4"
                                      Grid.ColumnSpan="2"
                                      CornerRadius="0"
                                      x:Name="FromAddressFrame"
                                      Style="{DynamicResource EntryFrameStyle}">
                    <controls:CustomPicker x:Name="AddressPicker"
                                           ItemsSource="{Binding FromAddressList}"
                                           ItemDisplayBinding="{Binding DisplayAddressWithBalance}"
                                           SelectedItem="{Binding WalletAddressViewModel}"
                                           Focused="OnFromAddressPickerFocused"
                                           Unfocused="OnFromAddressPickerFocused"
                                           TextColor="Transparent"
                                           Style="{DynamicResource CustomEntryStyle}"/>
                </controls:CustomFrame>
                <Label Text="{x:Static resources:AppResources.FromAddressLabel}"
                       Style="{DynamicResource EntryHintStyle}"
                       Padding="20,5,20,0"
                       IsVisible="True"/>
                <Label Grid.Row="1"
                       Text="{Binding WalletAddressViewModel.WalletAddress.Address}"
                       FontFamily="{DynamicResource RegularFont}"
                       TextColor="{DynamicResource MainTextColor}"
                       FontSize="14"
                       LineBreakMode="MiddleTruncation"
                       Padding="20,0,10,0"
                       VerticalTextAlignment="End">
                    <Label.GestureRecognizers>
                        <TapGestureRecognizer Tapped="OnFromAddressPickerClicked"/>
                    </Label.GestureRecognizers>
                </Label>
                <Label Grid.Row="2"
                       Style="{DynamicResource PickerBalanceLabelStyle}">
                    <Label.GestureRecognizers>
                        <TapGestureRecognizer Tapped="OnFromAddressPickerClicked"/>
                    </Label.GestureRecognizers>
                    <Label.FormattedText>
                        <FormattedString>
                            <Span Text="{x:Static resources:AppResources.Balance}"/>
                            <Span Text=": "/>
                            <Span Text="{Binding WalletAddressViewModel.WalletAddress.Balance, StringFormat='{0:0.#####}'}"
                                  FontFamily="{DynamicResource BoldFont}"
                                  FontSize="12"/>
                            <Span Text=" XTZ"
                                  FontFamily="{DynamicResource BoldFont}"
                                  FontSize="10"/>
                    </FormattedString>
                    </Label.FormattedText>
                </Label>
                <Image Source="DownArrowPicker"
                       Grid.Column="1"
                       Grid.RowSpan="3"
                       Margin="0,25,15,25">
                    <Image.GestureRecognizers>
                        <TapGestureRecognizer Tapped="OnFromAddressPickerClicked"/>
                    </Image.GestureRecognizers>
                </Image>
                <StackLayout Style="{DynamicResource SeparatorStyle}"
                             Grid.Row="3"
                             Grid.ColumnSpan="2"
                             Margin="20,0,0,0"/>
            </Grid>
            <controls:CustomFrame CornerRadius="0,0,20,20"
                                  x:Name="FeeFrame"
                                  HeightRequest="60"
                                  Style="{DynamicResource EntryFrameStyle}">
                <controls:CustomFrame.GestureRecognizers>
                    <TapGestureRecognizer Tapped="OnFeeEntryTapped"/>
                </controls:CustomFrame.GestureRecognizers>
                <controls:CustomFrame.Triggers>
                    <DataTrigger TargetType="controls:CustomFrame"
                                 Binding="{Binding UseDefaultFee}"
                                 Value="True">
                        <Setter Property="Opacity"
                                Value="0.7"/>
                    </DataTrigger>
                    <DataTrigger TargetType="controls:CustomFrame"
                                 Binding="{Binding UseDefaultFee}"
                                 Value="False">
                        <Setter Property="Opacity"
                                Value="1"/>
                    </DataTrigger>
                </controls:CustomFrame.Triggers>
                <StackLayout>
                    <Label Text="{x:Static resources:AppResources.FeeLabel}"
                           Style="{DynamicResource EntryHintStyle}"
                           IsVisible="True">
                        <Label.FormattedText>
                            <FormattedString>
                                <Span Text="{x:Static resources:AppResources.FeeLabel}"/>
                                <Span Text=", XTZ"/>
                            </FormattedString>
                        </Label.FormattedText>
                    </Label>
                    <StackLayout Orientation="Horizontal">
                        <controls:CustomEntry Style="{DynamicResource CustomEntryStyle}"
                                              x:Name="Fee"
                                              Keyboard="Numeric"
                                              Focused="OnFeeEntryFocused"
                                              Unfocused="OnFeeEntryFocused">
                            <controls:CustomEntry.Triggers>
                                <DataTrigger TargetType="controls:CustomEntry"
                                              Binding="{Binding UseDefaultFee}"
                                              Value="True">
                                    <Setter Property="IsReadOnly"
                                            Value="True"/>
                                    <Setter Property="TextColor"
                                            Value="{DynamicResource AdditionalTextColor}"/>
                                    <Setter Property="Opacity"
                                            Value="0.7"/>
                                </DataTrigger>
                                <DataTrigger TargetType="controls:CustomEntry"
                                             Binding="{Binding UseDefaultFee}"
                                             Value="False">
                                    <Setter Property="IsReadOnly"
                                            Value="False"/>
                                    <Setter Property="TextColor"
                                            Value="Black"/>
                                    <Setter Property="Opacity"
                                            Value="1"/>
                                </DataTrigger>
                            </controls:CustomEntry.Triggers>
                        </controls:CustomEntry>
                        <Label Text="{Binding FeeInBase, StringFormat='({0:0.##} $)'}"
                               TextColor="{DynamicResource AdditionalTextColor}"
                               FontFamily="{DynamicResource LightFont}"
                               FontSize="12"
                               VerticalTextAlignment="Start"
                               Padding="20,0"/>
                    </StackLayout>
                </StackLayout>
            </controls:CustomFrame>
            <StackLayout Orientation="Horizontal"
                         Padding="20">
                <Label Text="{x:Static resources:AppResources.UseDefaultFeeLabel}"
                       FontFamily="{DynamicResource RegularFont}"
                       TextColor="{DynamicResource MainTextColor}"
                       FontSize="14"
                       VerticalTextAlignment="Center"
                       HorizontalTextAlignment="Center"/>
                <Switch OnColor="{DynamicResource MainButtonBackgroundColor}"
                        IsToggled="{Binding UseDefaultFee}"
                        Toggled="OnUseDefaultFeeToggled"
                        HorizontalOptions="EndAndExpand"/>
            </StackLayout>
            <RelativeLayout>
                <Button Text="{x:Static resources:AppResources.NextButton}"
                        x:Name="NextButton"
                        Style="{DynamicResource MainButtonStyle}"
                        RelativeLayout.WidthConstraint="{ConstraintExpression Type=RelativeToParent, Property=Width, Factor=1}"
                        Clicked="OnNextButtonClicked"/>
                <ActivityIndicator x:Name="ValidatingLoader"
                                   RelativeLayout.YConstraint="{ConstraintExpression Type=RelativeToView, ElementName=NextButton, Property=Height, Factor=0.5}"
                                   RelativeLayout.XConstraint="{ConstraintExpression Type=RelativeToView, ElementName=NextButton, Property=Width, Factor=0.5}"
	                               Style="{DynamicResource DelegationLoaderStyle}"/>
            </RelativeLayout>
        </StackLayout>
    </ScrollView>
</ContentPage>